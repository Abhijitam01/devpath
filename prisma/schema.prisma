// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  projects       Project[]
  comments       Comment[]
  journalEntries JournalEntry[]
  bookmarks      Bookmark[]
  upvotes        Upvote[]
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  techStack   String[]
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps         Step[]
  journalEntries JournalEntry[]
  comments      Comment[]
  bookmarks     Bookmark[]
  upvotes       Upvote[]
}

model Step {
  id          String   @id @default(cuid())
  title       String
  description String
  isCompleted Boolean  @default(false)
  order       Int
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project        Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  journalEntries JournalEntry[]
}

model JournalEntry {
  id        String   @id @default(cuid())
  content   String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  stepId    String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  step    Step    @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}


